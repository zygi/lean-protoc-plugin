-- Generated by the Lean protobuf compiler. Do not edit manually.
-- source: google/protobuf/compiler/plugin.proto

import LeanProto
import Std.Data.AssocList

import LeanProtocPlugin.Google.Protobuf.Descriptor

set_option maxHeartbeats 10000000
set_option maxRecDepth 2048
set_option synthInstance.maxHeartbeats 10000000
set_option genSizeOfSpec false

open Std (AssocList)

namespace LeanProtocPlugin.Google.Protobuf.Compiler

inductive CodeGeneratorResponse_Feature where
| FEATURE_NONE : CodeGeneratorResponse_Feature
| FEATURE_PROTO3_OPTIONAL : CodeGeneratorResponse_Feature
deriving Repr, Inhabited, BEq

instance : LeanProto.ProtoEnum CodeGeneratorResponse_Feature where
  toInt
  | CodeGeneratorResponse_Feature.FEATURE_NONE => 0
  | CodeGeneratorResponse_Feature.FEATURE_PROTO3_OPTIONAL => 1

  ofInt
  | 0 => some CodeGeneratorResponse_Feature.FEATURE_NONE
  | 1 => some CodeGeneratorResponse_Feature.FEATURE_PROTO3_OPTIONAL
  | _ => none



mutual

-- Starting 
-- Starting Version
inductive Version where
| mk 
  (major : (Int))
  (minor : (Int))
  (patch : (Int))
  (suffix : (String))
  : Version

-- Starting CodeGeneratorRequest
inductive CodeGeneratorRequest where
| mk 
  (fileToGenerate : (Array (String)))
  (parameter : (String))
  (protoFile : (Array (LeanProtocPlugin.Google.Protobuf.FileDescriptorProto)))
  (compilerVersion : (Option (Version)))
  : CodeGeneratorRequest

-- Starting CodeGeneratorResponse
inductive CodeGeneratorResponse where
| mk 
  (error : (String))
  (supportedFeatures : (Nat))
  (file : (Array (CodeGeneratorResponse_File)))
  : CodeGeneratorResponse

-- Starting CodeGeneratorResponse_File
inductive CodeGeneratorResponse_File where
| mk 
  (name : (String))
  (insertionPoint : (String))
  (content : (String))
  (generatedCodeInfo : (Option (LeanProtocPlugin.Google.Protobuf.GeneratedCodeInfo)))
  : CodeGeneratorResponse_File


end

def Version.mkDefault : Version := 
  Version.mk arbitrary arbitrary arbitrary arbitrary
instance : Inhabited Version where 
  default := Version.mkDefault
def Version.major : Version → (Int)
| mk v0 v1 v2 v3 => v0
def Version.set_major (orig: Version) (val: (Int))
  : Version := match orig with
| mk v0 v1 v2 v3 => Version.mk val v1 v2 v3
def Version.minor : Version → (Int)
| mk v0 v1 v2 v3 => v1
def Version.set_minor (orig: Version) (val: (Int))
  : Version := match orig with
| mk v0 v1 v2 v3 => Version.mk v0 val v2 v3
def Version.patch : Version → (Int)
| mk v0 v1 v2 v3 => v2
def Version.set_patch (orig: Version) (val: (Int))
  : Version := match orig with
| mk v0 v1 v2 v3 => Version.mk v0 v1 val v3
def Version.suffix : Version → (String)
| mk v0 v1 v2 v3 => v3
def Version.set_suffix (orig: Version) (val: (String))
  : Version := match orig with
| mk v0 v1 v2 v3 => Version.mk v0 v1 v2 val
def CodeGeneratorRequest.mkDefault : CodeGeneratorRequest := 
  CodeGeneratorRequest.mk arbitrary arbitrary arbitrary none
instance : Inhabited CodeGeneratorRequest where 
  default := CodeGeneratorRequest.mkDefault
def CodeGeneratorRequest.fileToGenerate : CodeGeneratorRequest → (Array (String))
| mk v0 v1 v2 v3 => v0
def CodeGeneratorRequest.set_fileToGenerate (orig: CodeGeneratorRequest) (val: (Array (String)))
  : CodeGeneratorRequest := match orig with
| mk v0 v1 v2 v3 => CodeGeneratorRequest.mk val v1 v2 v3
def CodeGeneratorRequest.parameter : CodeGeneratorRequest → (String)
| mk v0 v1 v2 v3 => v1
def CodeGeneratorRequest.set_parameter (orig: CodeGeneratorRequest) (val: (String))
  : CodeGeneratorRequest := match orig with
| mk v0 v1 v2 v3 => CodeGeneratorRequest.mk v0 val v2 v3
def CodeGeneratorRequest.protoFile : CodeGeneratorRequest → (Array (LeanProtocPlugin.Google.Protobuf.FileDescriptorProto))
| mk v0 v1 v2 v3 => v2
def CodeGeneratorRequest.set_protoFile (orig: CodeGeneratorRequest) (val: (Array (LeanProtocPlugin.Google.Protobuf.FileDescriptorProto)))
  : CodeGeneratorRequest := match orig with
| mk v0 v1 v2 v3 => CodeGeneratorRequest.mk v0 v1 val v3
def CodeGeneratorRequest.compilerVersion : CodeGeneratorRequest → (Option (Version))
| mk v0 v1 v2 v3 => v3
def CodeGeneratorRequest.set_compilerVersion (orig: CodeGeneratorRequest) (val: (Option (Version)))
  : CodeGeneratorRequest := match orig with
| mk v0 v1 v2 v3 => CodeGeneratorRequest.mk v0 v1 v2 val
def CodeGeneratorResponse.mkDefault : CodeGeneratorResponse := 
  CodeGeneratorResponse.mk arbitrary arbitrary arbitrary
instance : Inhabited CodeGeneratorResponse where 
  default := CodeGeneratorResponse.mkDefault
def CodeGeneratorResponse.error : CodeGeneratorResponse → (String)
| mk v0 v1 v2 => v0
def CodeGeneratorResponse.set_error (orig: CodeGeneratorResponse) (val: (String))
  : CodeGeneratorResponse := match orig with
| mk v0 v1 v2 => CodeGeneratorResponse.mk val v1 v2
def CodeGeneratorResponse.supportedFeatures : CodeGeneratorResponse → (Nat)
| mk v0 v1 v2 => v1
def CodeGeneratorResponse.set_supportedFeatures (orig: CodeGeneratorResponse) (val: (Nat))
  : CodeGeneratorResponse := match orig with
| mk v0 v1 v2 => CodeGeneratorResponse.mk v0 val v2
def CodeGeneratorResponse.file : CodeGeneratorResponse → (Array (CodeGeneratorResponse_File))
| mk v0 v1 v2 => v2
def CodeGeneratorResponse.set_file (orig: CodeGeneratorResponse) (val: (Array (CodeGeneratorResponse_File)))
  : CodeGeneratorResponse := match orig with
| mk v0 v1 v2 => CodeGeneratorResponse.mk v0 v1 val
def CodeGeneratorResponse_File.mkDefault : CodeGeneratorResponse_File := 
  CodeGeneratorResponse_File.mk arbitrary arbitrary arbitrary none
instance : Inhabited CodeGeneratorResponse_File where 
  default := CodeGeneratorResponse_File.mkDefault
def CodeGeneratorResponse_File.name : CodeGeneratorResponse_File → (String)
| mk v0 v1 v2 v3 => v0
def CodeGeneratorResponse_File.set_name (orig: CodeGeneratorResponse_File) (val: (String))
  : CodeGeneratorResponse_File := match orig with
| mk v0 v1 v2 v3 => CodeGeneratorResponse_File.mk val v1 v2 v3
def CodeGeneratorResponse_File.insertionPoint : CodeGeneratorResponse_File → (String)
| mk v0 v1 v2 v3 => v1
def CodeGeneratorResponse_File.set_insertionPoint (orig: CodeGeneratorResponse_File) (val: (String))
  : CodeGeneratorResponse_File := match orig with
| mk v0 v1 v2 v3 => CodeGeneratorResponse_File.mk v0 val v2 v3
def CodeGeneratorResponse_File.content : CodeGeneratorResponse_File → (String)
| mk v0 v1 v2 v3 => v2
def CodeGeneratorResponse_File.set_content (orig: CodeGeneratorResponse_File) (val: (String))
  : CodeGeneratorResponse_File := match orig with
| mk v0 v1 v2 v3 => CodeGeneratorResponse_File.mk v0 v1 val v3
def CodeGeneratorResponse_File.generatedCodeInfo : CodeGeneratorResponse_File → (Option (LeanProtocPlugin.Google.Protobuf.GeneratedCodeInfo))
| mk v0 v1 v2 v3 => v3
def CodeGeneratorResponse_File.set_generatedCodeInfo (orig: CodeGeneratorResponse_File) (val: (Option (LeanProtocPlugin.Google.Protobuf.GeneratedCodeInfo)))
  : CodeGeneratorResponse_File := match orig with
| mk v0 v1 v2 v3 => CodeGeneratorResponse_File.mk v0 v1 v2 val

deriving instance BEq for CodeGeneratorResponse_File, CodeGeneratorResponse, CodeGeneratorRequest, Version

mutual

partial def Version_deserializeAux (x: Version) : LeanProto.EncDec.ProtoParseM Version := do
  if (← LeanProto.EncDec.done) then return x
  let (_type, key) ← LeanProto.EncDec.parseKey
  match key with
| 1 => do Version_deserializeAux (x.set_major (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseInt32AsInt) (x.major)))
| 2 => do Version_deserializeAux (x.set_minor (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseInt32AsInt) (x.minor)))
| 3 => do Version_deserializeAux (x.set_patch (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseInt32AsInt) (x.patch)))
| 4 => do Version_deserializeAux (x.set_suffix (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseString) (x.suffix)))
| 0 => do throw $ IO.userError "Decoding message with field number 0"
| _ => do let _ ← LeanProto.EncDec.parseUnknown _type; Version_deserializeAux x

partial def CodeGeneratorRequest_deserializeAux (x: CodeGeneratorRequest) : LeanProto.EncDec.ProtoParseM CodeGeneratorRequest := do
  if (← LeanProto.EncDec.done) then return x
  let (_type, key) ← LeanProto.EncDec.parseKey
  match key with
| 1 => do CodeGeneratorRequest_deserializeAux (x.set_fileToGenerate (← (LeanProto.EncDec.parseKeyAndNonPackedArray ((LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseString) arbitrary) _type) (x.fileToGenerate)))
| 2 => do CodeGeneratorRequest_deserializeAux (x.set_parameter (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseString) (x.parameter)))
| 15 => do CodeGeneratorRequest_deserializeAux (x.set_protoFile (← (LeanProto.EncDec.parseKeyAndNonPackedArray ((fun v => LeanProto.EncDec.parseMessage (LeanProtocPlugin.Google.Protobuf.FileDescriptorProto_deserializeAux v)) arbitrary) _type) (x.protoFile)))
| 3 => do CodeGeneratorRequest_deserializeAux (x.set_compilerVersion (← (fun v => LeanProto.EncDec.parseMessage (Version_deserializeAux v)) (x.compilerVersion.getD arbitrary)))
| 0 => do throw $ IO.userError "Decoding message with field number 0"
| _ => do let _ ← LeanProto.EncDec.parseUnknown _type; CodeGeneratorRequest_deserializeAux x

partial def CodeGeneratorResponse_deserializeAux (x: CodeGeneratorResponse) : LeanProto.EncDec.ProtoParseM CodeGeneratorResponse := do
  if (← LeanProto.EncDec.done) then return x
  let (_type, key) ← LeanProto.EncDec.parseKey
  match key with
| 1 => do CodeGeneratorResponse_deserializeAux (x.set_error (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseString) (x.error)))
| 2 => do CodeGeneratorResponse_deserializeAux (x.set_supportedFeatures (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseUInt64AsNat) (x.supportedFeatures)))
| 15 => do CodeGeneratorResponse_deserializeAux (x.set_file (← (LeanProto.EncDec.parseKeyAndNonPackedArray ((fun v => LeanProto.EncDec.parseMessage (CodeGeneratorResponse_File_deserializeAux v)) arbitrary) _type) (x.file)))
| 0 => do throw $ IO.userError "Decoding message with field number 0"
| _ => do let _ ← LeanProto.EncDec.parseUnknown _type; CodeGeneratorResponse_deserializeAux x

partial def CodeGeneratorResponse_File_deserializeAux (x: CodeGeneratorResponse_File) : LeanProto.EncDec.ProtoParseM CodeGeneratorResponse_File := do
  if (← LeanProto.EncDec.done) then return x
  let (_type, key) ← LeanProto.EncDec.parseKey
  match key with
| 1 => do CodeGeneratorResponse_File_deserializeAux (x.set_name (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseString) (x.name)))
| 2 => do CodeGeneratorResponse_File_deserializeAux (x.set_insertionPoint (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseString) (x.insertionPoint)))
| 15 => do CodeGeneratorResponse_File_deserializeAux (x.set_content (← (LeanProto.EncDec.withIgnoredState LeanProto.EncDec.parseString) (x.content)))
| 16 => do CodeGeneratorResponse_File_deserializeAux (x.set_generatedCodeInfo (← (fun v => LeanProto.EncDec.parseMessage (LeanProtocPlugin.Google.Protobuf.GeneratedCodeInfo_deserializeAux v)) (x.generatedCodeInfo.getD arbitrary)))
| 0 => do throw $ IO.userError "Decoding message with field number 0"
| _ => do let _ ← LeanProto.EncDec.parseUnknown _type; CodeGeneratorResponse_File_deserializeAux x


end



mutual

partial def Version_serializeAux : Version -> LeanProto.EncDec.ProtoSerAction
| Version.mk v0 v1 v2 v3 => do
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeIntAsInt32) (LeanProto.EncDec.WireType.ofLit 0 rfl) 1) v0
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeIntAsInt32) (LeanProto.EncDec.WireType.ofLit 0 rfl) 2) v1
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeIntAsInt32) (LeanProto.EncDec.WireType.ofLit 0 rfl) 3) v2
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeString) (LeanProto.EncDec.WireType.ofLit 2 rfl) 4) v3

partial def CodeGeneratorRequest_serializeAux : CodeGeneratorRequest -> LeanProto.EncDec.ProtoSerAction
| CodeGeneratorRequest.mk v0 v1 v2 v3 => do
  (LeanProto.EncDec.serializeUnpackedArrayWithTag (LeanProto.EncDec.serializeString) (LeanProto.EncDec.WireType.ofLit 2 rfl) 1) v0
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeString) (LeanProto.EncDec.WireType.ofLit 2 rfl) 2) v1
  (LeanProto.EncDec.serializeUnpackedArrayWithTag ((LeanProto.EncDec.serializeMessage (LeanProtocPlugin.Google.Protobuf.FileDescriptorProto_serializeAux))) (LeanProto.EncDec.WireType.ofLit 2 rfl) 15) v2
  LeanProto.EncDec.serializeOpt (LeanProto.EncDec.serializeWithTag ((LeanProto.EncDec.serializeMessage (Version_serializeAux))) (LeanProto.EncDec.WireType.ofLit 2 rfl) 3) v3

partial def CodeGeneratorResponse_serializeAux : CodeGeneratorResponse -> LeanProto.EncDec.ProtoSerAction
| CodeGeneratorResponse.mk v0 v1 v2 => do
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeString) (LeanProto.EncDec.WireType.ofLit 2 rfl) 1) v0
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeNatAsUInt64) (LeanProto.EncDec.WireType.ofLit 0 rfl) 2) v1
  (LeanProto.EncDec.serializeUnpackedArrayWithTag ((LeanProto.EncDec.serializeMessage (CodeGeneratorResponse_File_serializeAux))) (LeanProto.EncDec.WireType.ofLit 2 rfl) 15) v2

partial def CodeGeneratorResponse_File_serializeAux : CodeGeneratorResponse_File -> LeanProto.EncDec.ProtoSerAction
| CodeGeneratorResponse_File.mk v0 v1 v2 v3 => do
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeString) (LeanProto.EncDec.WireType.ofLit 2 rfl) 1) v0
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeString) (LeanProto.EncDec.WireType.ofLit 2 rfl) 2) v1
  LeanProto.EncDec.serializeSkipDefault (LeanProto.EncDec.serializeWithTag (LeanProto.EncDec.serializeString) (LeanProto.EncDec.WireType.ofLit 2 rfl) 15) v2
  LeanProto.EncDec.serializeOpt (LeanProto.EncDec.serializeWithTag ((LeanProto.EncDec.serializeMessage (LeanProtocPlugin.Google.Protobuf.GeneratedCodeInfo_serializeAux))) (LeanProto.EncDec.WireType.ofLit 2 rfl) 16) v3


end


instance : LeanProto.ProtoSerialize Version where
  serialize x := do
    let res := LeanProto.EncDec.serialize (Version_serializeAux x)
    LeanProto.EncDec.resultStateToExcept res

instance : LeanProto.ProtoDeserialize Version where
  deserialize b :=
    let res := LeanProto.EncDec.parse b (Version_deserializeAux (Version.mkDefault))
    LeanProto.EncDec.resultToExcept res

instance : LeanProto.ProtoSerialize CodeGeneratorRequest where
  serialize x := do
    let res := LeanProto.EncDec.serialize (CodeGeneratorRequest_serializeAux x)
    LeanProto.EncDec.resultStateToExcept res

instance : LeanProto.ProtoDeserialize CodeGeneratorRequest where
  deserialize b :=
    let res := LeanProto.EncDec.parse b (CodeGeneratorRequest_deserializeAux (CodeGeneratorRequest.mkDefault))
    LeanProto.EncDec.resultToExcept res

instance : LeanProto.ProtoSerialize CodeGeneratorResponse where
  serialize x := do
    let res := LeanProto.EncDec.serialize (CodeGeneratorResponse_serializeAux x)
    LeanProto.EncDec.resultStateToExcept res

instance : LeanProto.ProtoDeserialize CodeGeneratorResponse where
  deserialize b :=
    let res := LeanProto.EncDec.parse b (CodeGeneratorResponse_deserializeAux (CodeGeneratorResponse.mkDefault))
    LeanProto.EncDec.resultToExcept res

instance : LeanProto.ProtoSerialize CodeGeneratorResponse_File where
  serialize x := do
    let res := LeanProto.EncDec.serialize (CodeGeneratorResponse_File_serializeAux x)
    LeanProto.EncDec.resultStateToExcept res

instance : LeanProto.ProtoDeserialize CodeGeneratorResponse_File where
  deserialize b :=
    let res := LeanProto.EncDec.parse b (CodeGeneratorResponse_File_deserializeAux (CodeGeneratorResponse_File.mkDefault))
    LeanProto.EncDec.resultToExcept res


end LeanProtocPlugin.Google.Protobuf.Compiler